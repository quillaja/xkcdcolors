// +build ignore

//go:generate go run generate.go

package main

import (
	"bufio"
	"io"
	"os"
	"strings"
	"text/template"
)

const (
	source      = "rgb.txt"
	destination = "colors.go"
)

func main() {
	sourceFile, err := os.Open(source)
	if err != nil {
		panic(err)
	}
	defer sourceFile.Close()

	entries, err := parseSource(sourceFile)
	if err != nil {
		panic(err)
	}

	destFile, err := os.Create(destination)
	if err != nil {
		panic(err)
	}
	defer destFile.Close()

	err = writeDestination(destFile, entries)
	if err != nil {
		panic(err)
	}
}

type entry struct {
	Original string
	Name     string
	R, G, B  string
}

func parseLine(line string) entry {
	parts := strings.Split(line, "\t")
	// clean name
	parts[0] = strings.ReplaceAll(parts[0], "'", "")
	parts[0] = strings.Title(parts[0])
	parts[0] = strings.ReplaceAll(parts[0], " ", "")
	parts[0] = strings.ReplaceAll(parts[0], "/", "_")
	// clean color value
	parts[1] = strings.TrimPrefix(parts[1], "#")

	return entry{
		Original: strings.ReplaceAll(line, "\t", " "),
		Name:     parts[0],
		R:        parts[1][:2],
		G:        parts[1][2:4],
		B:        parts[1][4:],
	}
}

func parseSource(r io.Reader) (entries []entry, err error) {
	scanner := bufio.NewScanner(r)
	for scanner.Scan() {
		line := scanner.Text()
		// skip 'comments'
		if strings.HasPrefix(line, "#") {
			continue
		}

		entries = append(entries, parseLine(line))
	}
	err = scanner.Err()
	return
}

func writeDestination(dest io.Writer, entries []entry) error {
	t := template.New("").Funcs(template.FuncMap{
		"plusone": func(i int) int { return i + 1 },
	})
	t, err := t.Parse(codetemplate)
	if err != nil {
		return err
	}

	return t.Execute(dest, entries)
}

const codetemplate = `// Code generated by package maintainer. DO NOT EDIT.
// Color names and values from xkcd's color name survey.
// https://xkcd.com/color/rgb/
// This package is licenced under the same license as the source:
// CC0 1.0 public domain. https://creativecommons.org/publicdomain/zero/1.0/

// Package xkcdcolors provides named colors from xkcd's color name survey.
package xkcdcolors

import "image/color"

var (
	{{range $index, $entry := .}}
	// {{plusone $index}} {{$entry.Original}}
	{{$entry.Name}} = color.RGBA{R: 0x{{$entry.R}}, G: 0x{{$entry.G}}, B: 0x{{$entry.B}}, A:0xff }
	{{end}}
)

// All is a slice of all the colors.
var All = []color.RGBA{ {{range .}}
	{{.Name}},{{end}}
}
`
